#!/bin/bash

# Load environment variables
source .env

# Get the current date in YYYY-MM-DD format
CURRENT_DATE=$(date +'%Y-%m-%d')

# AWS Lambda function name
#LAMBDA_FUNCTION_NAME="$FUNCTION_NAME"

# AWS API Gateway name
API_GATEWAY_NAME="$API_GATEWAY_NAME"

# AWS DynamoDB table name
#DYNAMODB_TABLE_NAME="$TABLE_NAME"

# Deploy Lambda function
#aws lambda create-function \
#    --function-name "$FUNCTION_NAME" \
#    --runtime python3.11 \
#    --handler lambda.lambda_handler \
#    --role arn:aws:iam::'$AWS_ACCOUNT_ID'/my-lambda-role \
#    --code S3Bucket=my-lambda-bucket-01,S3Key=lambda-essentials.zip

# Create DynamoDB table
#aws dynamodb create-table \
#    --table-name "$TABLE_NAME" \
#    --attribute-definitions AttributeName="$PARTITION_KEY",AttributeType=S \
#    --key-schema AttributeName="$PARTITION_KEY",KeyType=HASH \
#    --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5


# Create a Gateway REST API
#api_id=$(aws apigateway create-rest-api --name $API_GATEWAY_NAME --query 'id' --output text)


# Get the root resource ID
#root_resource_id=$(aws apigateway get-resources --rest-api-id $api_id --query 'items[0].id' --output text)

# Creating a resource under the root resource
#resource_id=$(aws apigateway create-resource --rest-api-id $api_id --parent-id $root_resource_id --path-part addTask)
#resource_id=$(aws apigateway create-resource --rest-api-id $api_id --parent-id $root_resource_id --path-part getTasks)
#resource_id=$(aws apigateway create-resource --rest-api-id $api_id --parent-id $root_resource_id --path-part updateTask)
#resource_id=$(aws apigateway create-resource --rest-api-id $api_id --parent-id $root_resource_id --path-part deleteTask)


# Creating a POST method for the resource
#aws apigateway put-method --rest-api-id $api_id --resource-id $resource_id --http-method POST --authorization-type NONE

# Creating a GET method for the resource
#aws apigateway put-method --rest-api-id $api_id --resource-id $resource_id --http-method GET --authorization-type NONE

# Creating a PATCH method for the resource
#aws apigateway put-method --rest-api-id $api_id --resource-id $resource_id --http-method PATCH --authorization-type NONE

# Creating a DELETE method for the resource
#aws apigateway put-method --rest-api-id $api_id --resource-id $resource_id --http-method DELETE --authorization-type NONE

# Integrate the Lambda function with POST method
#aws apigateway put-integration --rest-api-id "$api_id" --resource-id "$resource_id" --http-method POST --type AWS_PROXY \
#    --integration-http-method POST --uri arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:"$AWS_ACCOUNT_ID":function:"$FUNCTION_NAME"/invocations

# Integrate the Lambda function with GET method
#aws apigateway put-integration --rest-api-id "$api_id" --resource-id "$resource_id" --http-method GET --type AWS_PROXY \
#    --integration-http-method GET --uri arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:"$AWS_ACCOUNT_ID":function:"$FUNCTION_NAME"/invocations

# Integrate the Lambda function with PATCH method
#aws apigateway put-integration --rest-api-id "$api_id" --resource-id "$resource_id" --http-method PATCH --type AWS_PROXY \
#    --integration-http-method PATCH --uri arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:"$AWS_ACCOUNT_ID":function:"$FUNCTION_NAME"/invocations

# Integrate the Lambda function with DELETE method
#aws apigateway put-integration --rest-api-id "$api_id" --resource-id "$resource_id" --http-method DELETE --type AWS_PROXY \
#    --integration-http-method DELETE --uri arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:"$AWS_ACCOUNT_ID":function:"$FUNCTION_NAME"/invocations

# Create method responses for POST
#aws apigateway put-method-response --rest-api-id "$api_id" --resource-id "$resource_id" --http-method POST --status-code "201" --response-models '{"application/json":"CreatedResponse"}' --status-code "500" --response-models '{"application/json":"ErrorResponse"}'

# Create method responses for GET
#aws apigateway put-method-response --rest-api-id "$api_id" --resource-id "$resource_id" --http-method "GET" --status-code "200" --response-models '{"application/json":"ItemResponse"}' --status-code "404" --response-models '{"application/json":"ErrorResponse"}' --status-code "500" --response-models '{"application/json":"ErrorResponse"}'

# Create method responses for PATCH
#aws apigateway put-method-response --rest-api-id "$api_id" --resource-id "$resource_id" --http-method "PATCH" --status-code "200" --response-models '{"application/json":"ItemResponse"}' --status-code "400" --response-models '{"application/json":"ErrorResponse"}' --status-code "500" --response-models '{"application/json":"ErrorResponse"}'

# Create method responses for DELETE
#aws apigateway put-method-response --rest-api-id "$api_id" --resource-id "$resource_id" --http-method "DELETE" --status-code "200" --response-models '{"application/json":"DeletedResponse"}' --status-code "400" --response-models '{"application/json":"ErrorResponse"}' --status-code "500" --response-models '{"application/json":"ErrorResponse"}'



# Deploy the API
#deployment_id=$(aws apigateway create-deployment --rest-api-id $api_id --stage-name prod)

# Testing Invoke Method
#aws apigateway test-invoke-method --rest-api-id $api_id --resource-id $resource_id --http-method POST --path-with-query-string "" --body "{}"